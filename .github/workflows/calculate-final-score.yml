
name: "Finalize Nomination Ranking"
on:
  issue_comment:
    types: [created]

jobs:
  finalize-decision:
    runs-on: ubuntu-latest
    steps:
      - name: Calculate Average Score from Comments & Approve/Reject
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = context.payload.issue.number;
            const repo = context.repo.repo;
            const owner = context.repo.owner;

            // Get all comments on the issue
            const comments = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number
            });

            const scoreRegex = /^score:\s*(\d)/i;
            let totalScore = 0;
            let numScores = 0;
            const reviewers = [];
            const seenUsers = new Set();

            comments.data.forEach(comment => {
              const match = comment.body.match(scoreRegex);
              const author = comment.user.login;

              if (match && !seenUsers.has(author)) {
                const score = parseInt(match[1]);
                if (score >= 1 && score <= 5) {
                  totalScore += score;
                  numScores++;
                  seenUsers.add(author);
                  reviewers.push(`@${author}`);
                }
              }
            });

            if (numScores === 0) {
              console.log("No valid scores found.");
              return;
            }

            const average = totalScore / numScores;
            const finalLabel = average >= 3.0 ? "approved" : "rejected";
            const oppositeLabel = finalLabel === "approved" ? "rejected" : "approved";

            // Remove opposite label if it exists
            const existingLabels = (await github.rest.issues.get({
              owner,
              repo,
              issue_number
            })).data.labels.map(label => label.name);

            if (existingLabels.includes(oppositeLabel)) {
              await github.rest.issues.removeLabel({
                owner,
                repo,
                issue_number,
                name: oppositeLabel
              });
            }

            // Add the correct outcome label
            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number,
              labels: [finalLabel]
            });

            // Post comment with reviewer names and score summary
            const reviewersList = reviewers.join(", ");
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: `ðŸ§® Average score from ${numScores} reviewer(s): **${average.toFixed(2)}**\nðŸ‘¥ Reviewed by: ${reviewersList}\nðŸ“Œ Final decision: **${finalLabel.toUpperCase()}**`
            });
