name: "Transfer Accepted Submission to Private Repo"

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: "Issue number to transfer"
        required: true
        type: number

permissions:
  contents: read
  issues: write

jobs:
  transfer-submission:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Transfer Issue to Private Repo
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PRIVATE_REPO_TOKEN }}
          script: |
            const issue_number = parseInt(core.getInput("issue_number"));
            const repoOwner = context.repo.owner;
            const publicRepo = context.repo.repo;
            const privateOwner = "pytorch-fdn";
            const privateName = "ambassador-program-management";
            const assignee = "reginankenchor";

            const issue = await github.rest.issues.get({
              owner: repoOwner,
              repo: publicRepo,
              issue_number
            });

            const hasAcceptedLabel = (issue.data.labels || []).some(
              l => String(l.name || "").toLowerCase().includes("accept")
            );

            if (!hasAcceptedLabel) {
              throw new Error(`Issue #${issue_number} does not have an 'Accepted' label. Aborting transfer.`);
            }

            const bodyContent = [
              "üìù Submission Transferred from Public Repository",
              "",
              "----------------------------------------",
              issue.data.body || "",
              "----------------------------------------",
              `üîî @${assignee} ‚Äî this submission has been accepted and is now ready for program-level follow-up.`
            ].join("\n\n");

            const newIssue = await github.rest.issues.create({
              owner: privateOwner,
              repo: privateName,
              title: issue.data.title,
              body: bodyContent,
              assignees: [assignee]
            });

            // Invite the issue author to the private repo with read access
            const applicant = issue.data.user?.login;
            if (applicant) {
              try {
                await github.rest.repos.addCollaborator({
                  owner: privateOwner,
                  repo: privateName,
                  username: applicant,
                  permission: "pull" // read-only access
                });
              } catch (e) {
                // ignore invite errors (already invited, org policy, etc.)
              }
            }

            const confirmation = [
              "‚úÖ This submission has been **accepted** and transferred to the private program management repository.",
              "",
              `üîó [View it here](${newIssue.data.html_url})`,
              "",
              "‚ÑπÔ∏è This issue remains open here for visibility, but ongoing tracking happens in the private repository."
            ].join("\n\n");

            await github.rest.issues.createComment({
              owner: repoOwner,
              repo: publicRepo,
              issue_number,
              body: confirmation
            });
